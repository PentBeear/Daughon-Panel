Page SixBtn
    Attributes
        ID                                  : 0
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
        Locked                              : no
        Swide up page ID                    : disabled
        Swide down page ID                  : disabled
        Swide left page ID                  : disabled
        Swide right page ID                 : disabled
    
    Events
        Preinitialize Event
            // Enables the timer to reset back to home and resets the light submenu id
            dim=varstor.brightness.val
            varstor.serror.val=0
            hometimer.en=1
            // Disable the serial parser to use its buffers to parse data
            sreadbuffer.en=0
            varstor.smtrigid.val=999
            varstor.pagereceived.val=0 // Resets page received check
            name.txt=varstor.pagename.txt // Initializes page with the received data from the json
            // Get name for every button
            // This also checks if the button should be hidden (name=hidden)
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=0,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=1",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,"name=",1 // name=
            spstr varstor.buff.txt,varstor.buff.txt,",icon=",0 // ,icon=
            bt0name.txt=varstor.buff.txt
            if(varstor.buff.txt=="hidden")
            {
                vis bt0name,0
                vis bt0,0
            }
            //btn=0,type=3,name=Bob,icon=0,state=1","btn=1,type=0,name=e,icon=1,state=1","btn=2,type=2,name=Light,icon=0,state=1","btn=3,type=1,name=Zoomer,icon=0,state=0","btn=4,type=4,name=Light,icon=2","btn=5,t
            //
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=1,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=2",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,"name=",1 // name=
            spstr varstor.buff.txt,varstor.buff.txt,",icon=",0 // ,icon=
            bt1name.txt=varstor.buff.txt
            if(varstor.buff.txt=="hidden")
            {
                vis bt1name,0
                vis bt1,0
            }
            //
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=2,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=3",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,"name=",1 // name=
            spstr varstor.buff.txt,varstor.buff.txt,",icon=",0 // ,icon=
            bt2name.txt=varstor.buff.txt
            if(varstor.buff.txt=="hidden")
            {
                vis bt2name,0
                vis bt2,0
            }
            //
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=3,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=4",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,"name=",1 // name=
            spstr varstor.buff.txt,varstor.buff.txt,",icon=",0 // ,icon=
            bt3name.txt=varstor.buff.txt
            if(varstor.buff.txt=="hidden")
            {
                vis bt3name,0
                vis bt3,0
            }
            //
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=4,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=5",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,"name=",1 // name=
            spstr varstor.buff.txt,varstor.buff.txt,",icon=",0 // ,icon=
            bt4name.txt=varstor.buff.txt
            if(varstor.buff.txt=="hidden")
            {
                vis bt4name,0
                vis bt4,0
            }
            //
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=5,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\"",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,"name=",1 // name=
            spstr varstor.buff.txt,varstor.buff.txt,",icon=",0 // ,icon=
            bt5name.txt=varstor.buff.txt
            if(varstor.buff.txt=="hidden")
            {
                vis bt5name,0
                vis bt5,0
            }
            //
            // Button type getting
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=0,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=1",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,",name",0 //
            covx varstor.buff.txt,varstor.txttonum.val,0,0
            bt0type.val=varstor.txttonum.val
            //
            // Button type getting
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=1,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=2",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,",name",0 //
            covx varstor.buff.txt,varstor.txttonum.val,0,0
            bt1type.val=varstor.txttonum.val
            //
            // Button type getting
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=2,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=3",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,",name",0 //
            covx varstor.buff.txt,varstor.txttonum.val,0,0
            bt2type.val=varstor.txttonum.val
            //
            // Button type getting
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=3,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=4",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,",name",0 //
            covx varstor.buff.txt,varstor.txttonum.val,0,0
            bt3type.val=varstor.txttonum.val
            //
            // Button type getting
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=4,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=5",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,",name",0 //
            covx varstor.buff.txt,varstor.txttonum.val,0,0
            bt4type.val=varstor.txttonum.val
            //
            // Button type getting
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=5,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\"",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,",name",0 //
            covx varstor.buff.txt,varstor.txttonum.val,0,0
            bt5type.val=varstor.txttonum.val
            //
            // Only load the stored states if they have not been loaded before
            if(varstor.loadedstate.val==0)
            {
                // Button state getting
                spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=0,type=",1 // btn=0,type=
                spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=1",0 // ","btn=1
                spstr varstor.buff.txt,varstor.buff.txt,",state=",1 //
                covx varstor.buff.txt,varstor.txttonum.val,0,0
                bt0state.val=varstor.txttonum.val
                //
                // Button state getting
                spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=1,type=",1 // btn=0,type=
                spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=2",0 // ","btn=1
                spstr varstor.buff.txt,varstor.buff.txt,",state=",1 //
                covx varstor.buff.txt,varstor.txttonum.val,0,0
                bt1state.val=varstor.txttonum.val
                //
                // Button state getting
                spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=2,type=",1 // btn=0,type=
                spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=3",0 // ","btn=1
                spstr varstor.buff.txt,varstor.buff.txt,",state=",1 //
                covx varstor.buff.txt,varstor.txttonum.val,0,0
                bt2state.val=varstor.txttonum.val
                //
                // Button state getting
                spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=3,type=",1 // btn=0,type=
                spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=4",0 // ","btn=1
                spstr varstor.buff.txt,varstor.buff.txt,",state=",1 //
                covx varstor.buff.txt,varstor.txttonum.val,0,0
                bt3state.val=varstor.txttonum.val
                //
                // Button state getting
                spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=4,type=",1 // btn=0,type=
                spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=5",0 // ","btn=1
                spstr varstor.buff.txt,varstor.buff.txt,",state=",1 //
                covx varstor.buff.txt,varstor.txttonum.val,0,0
                bt4state.val=varstor.txttonum.val
                //
                // Button state getting
                spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=5,type=",1 // btn=0,type=
                spstr varstor.buff.txt,varstor.buff.txt,"\"",0 // ","btn=1
                spstr varstor.buff.txt,varstor.buff.txt,",state=",1 //
                covx varstor.buff.txt,varstor.txttonum.val,0,0
                bt5state.val=varstor.txttonum.val
                //
            }
            // Button icon getting
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=0,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=1",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,",icon=",1 //
            covx varstor.buff.txt,varstor.txttonum.val,0,0
            // This converts the 0-1 icon value to the actual stored icons and selects whether its on or off
            if(bt0state.val==0)
            {
                if(varstor.txttonum.val==0) // Fan
                {
                    bt0.pic=15
                }
                if(varstor.txttonum.val==1) // White Light
                {
                    bt0.pic=16
                }
                if(varstor.txttonum.val==2) // RGBW Light
                {
                    bt0.pic=17
                }
            }else
            {
                if(varstor.txttonum.val==0) // Fan
                {
                    bt0.pic=18
                }
                if(varstor.txttonum.val==1) // White Light
                {
                    bt0.pic=19
                }
                if(varstor.txttonum.val==2) // RGBW Light
                {
                    bt0.pic=20
                }
            }
            //
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=1,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=2",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,",icon=",1 //
            covx varstor.buff.txt,varstor.txttonum.val,0,0
            if(bt1state.val==0)
            {
                if(varstor.txttonum.val==0) // Fan
                {
                    bt1.pic=15
                }
                if(varstor.txttonum.val==1) // White Light
                {
                    bt1.pic=16
                }
                if(varstor.txttonum.val==2) // RGBW Light
                {
                    bt1.pic=17
                }
            }else
            {
                if(varstor.txttonum.val==0) // Fan
                {
                    bt1.pic=18
                }
                if(varstor.txttonum.val==1) // White Light
                {
                    bt1.pic=19
                }
                if(varstor.txttonum.val==2) // RGBW Light
                {
                    bt1.pic=20
                }
            }
            //
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=2,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=3",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,",icon=",1 //
            covx varstor.buff.txt,varstor.txttonum.val,0,0
            if(bt2state.val==0)
            {
                if(varstor.txttonum.val==0) // Fan
                {
                    bt2.pic=15
                }
                if(varstor.txttonum.val==1) // White Light
                {
                    bt2.pic=16
                }
                if(varstor.txttonum.val==2) // RGBW Light
                {
                    bt2.pic=17
                }
            }else
            {
                if(varstor.txttonum.val==0) // Fan
                {
                    bt2.pic=18
                }
                if(varstor.txttonum.val==1) // White Light
                {
                    bt2.pic=19
                }
                if(varstor.txttonum.val==2) // RGBW Light
                {
                    bt2.pic=20
                }
            }
            //
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=3,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=4",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,",icon=",1 //
            covx varstor.buff.txt,varstor.txttonum.val,0,0
            if(bt3state.val==0)
            {
                if(varstor.txttonum.val==0) // Fan
                {
                    bt3.pic=15
                }
                if(varstor.txttonum.val==1) // White Light
                {
                    bt3.pic=16
                }
                if(varstor.txttonum.val==2) // RGBW Light
                {
                    bt3.pic=17
                }
            }else
            {
                if(varstor.txttonum.val==0) // Fan
                {
                    bt3.pic=18
                }
                if(varstor.txttonum.val==1) // White Light
                {
                    bt3.pic=19
                }
                if(varstor.txttonum.val==2) // RGBW Light
                {
                    bt3.pic=20
                }
            }
            //
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=4,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\",\"btn=5",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,",icon=",1 //
            covx varstor.buff.txt,varstor.txttonum.val,0,0
            if(bt4state.val==0)
            {
                if(varstor.txttonum.val==0) // Fan
                {
                    bt4.pic=15
                }
                if(varstor.txttonum.val==1) // White Light
                {
                    bt4.pic=16
                }
                if(varstor.txttonum.val==2) // RGBW Light
                {
                    bt4.pic=17
                }
            }else
            {
                if(varstor.txttonum.val==0) // Fan
                {
                    bt4.pic=18
                }
                if(varstor.txttonum.val==1) // White Light
                {
                    bt4.pic=19
                }
                if(varstor.txttonum.val==2) // RGBW Light
                {
                    bt4.pic=20
                }
            }
            //
            spstr varstor.pageinfo.txt,varstor.buff.txt,"btn=5,type=",1 // btn=0,type=
            spstr varstor.buff.txt,varstor.buff.txt,"\"",0 // ","btn=1
            spstr varstor.buff.txt,varstor.buff.txt,",icon=",1 //
            covx varstor.buff.txt,varstor.txttonum.val,0,0
            if(bt5state.val==0)
            {
                if(varstor.txttonum.val==0) // Fan
                {
                    bt5.pic=15
                }
                if(varstor.txttonum.val==1) // White Light
                {
                    bt5.pic=16
                }
                if(varstor.txttonum.val==2) // RGBW Light
                {
                    bt5.pic=17
                }
            }else
            {
                if(varstor.txttonum.val==0) // Fan
                {
                    bt5.pic=18
                }
                if(varstor.txttonum.val==1) // White Light
                {
                    bt5.pic=19
                }
                if(varstor.txttonum.val==2) // RGBW Light
                {
                    bt5.pic=20
                }
            }
            // Checks that the page has loaded the button states if so ignore loading them again
            // This lets you toggle the buttons and keep their new toggle states after a refresh
            varstor.loadedstate.val=1
            // Enables the serial parsing after using the buffers to parse the page data
            sreadbuffer.en=1
        
Variable (int32) bt0type
    Attributes
        ID   : 20
        Scope: local
        Value: 0
    
Variable (int32) bt1type
    Attributes
        ID   : 21
        Scope: local
        Value: 0
    
Variable (int32) bt2type
    Attributes
        ID   : 22
        Scope: local
        Value: 0
    
Variable (int32) bt3type
    Attributes
        ID   : 23
        Scope: local
        Value: 0
    
Variable (int32) bt4type
    Attributes
        ID   : 24
        Scope: local
        Value: 0
    
Variable (int32) bt5type
    Attributes
        ID   : 25
        Scope: local
        Value: 0
    
Variable (int32) bt0state
    Attributes
        ID   : 28
        Scope: global
        Value: 0
    
Variable (int32) bt1state
    Attributes
        ID   : 29
        Scope: global
        Value: 0
    
Variable (int32) bt2state
    Attributes
        ID   : 30
        Scope: global
        Value: 0
    
Variable (int32) bt3state
    Attributes
        ID   : 31
        Scope: global
        Value: 0
    
Variable (int32) bt4state
    Attributes
        ID   : 32
        Scope: global
        Value: 0
    
Variable (int32) bt5state
    Attributes
        ID   : 33
        Scope: global
        Value: 0
    
Text bt0name
    Attributes
        ID                                  : 5
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
        Associated Keyboard                 : none
        Text                                : N
        Max. Text Size                      : 10
    
Text bt1name
    Attributes
        ID                                  : 6
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
        Associated Keyboard                 : none
        Text                                : N
        Max. Text Size                      : 10
    
Text bt2name
    Attributes
        ID                                  : 7
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
        Associated Keyboard                 : none
        Text                                : N
        Max. Text Size                      : 10
    
Text name
    Attributes
        ID                                  : 8
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
        Associated Keyboard                 : none
        Text                                : null
        Max. Text Size                      : 10
    
Text bt3name
    Attributes
        ID                                  : 10
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
        Associated Keyboard                 : none
        Text                                : N
        Max. Text Size                      : 10
    
Text bt4name
    Attributes
        ID                                  : 13
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
        Associated Keyboard                 : none
        Text                                : N
        Max. Text Size                      : 10
    
Text bt5name
    Attributes
        ID                                  : 36
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
        Associated Keyboard                 : none
        Text                                : N
        Max. Text Size                      : 10
    
Picture background
    Attributes
        ID                                  : 1
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
    
Picture bt0
    Attributes
        ID                                  : 2
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
    
    Events
        Touch Press Event
            // Sets the trigger name and id for a potentional submenu
            varstor.smtrigid.val=0
            varstor.smtrigname.txt=bt0name.txt
            if(bt0type.val==0) // Light (RGBW) if held goto submenu
            {
                rgbhold.en=1
            }
            if(bt0type.val==1) // Light (RGBKW)
            {
                rgbwhold.en=1
            }
            if(bt0type.val==2) // Light (KW)
            {
                rgbkwhold.en=1
            }
            if(bt0type.val==3) // Dimmer
            {
                kwhold.en=1
            }
            if(bt0type.val==4) // Dimmer
            {
                dimhold.en=1
            }
            if(bt0type.val==5) // Toggle
            {
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"0\",\"action\":\"toggle\"}}",0
                if(bt0state.val==0) // Switch to on
                {
                    if(bt0.pic==15) // Fan
                    {
                        bt0.pic=18
                    }
                    if(bt0.pic==16) // White Light
                    {
                        bt0.pic=19
                    }
                    if(bt0.pic==17) // RGBW Light
                    {
                        bt0.pic=20
                    }
                    bt0state.val=1
                }else
                {
                    if(bt0.pic==18) // Fan
                    {
                        bt0.pic=15
                    }
                    if(bt0.pic==19) // White Light
                    {
                        bt0.pic=16
                    }
                    if(bt0.pic==20) // RGBW Light
                    {
                        bt0.pic=17
                    }
                    bt0state.val=0
                }
            }
            if(bt0type.val==6) // static
            {
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"0\",\"action\":\"run\"}}",0
            }
        
        Touch Release Event
            if(bt0type.val==0)// Light (RGBW) Released (just toggle)
            {
                rgbhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"0\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt0state.val==0) // Switch to on
                {
                    if(bt0.pic==15) // Fan
                    {
                        bt0.pic=18
                    }
                    if(bt0.pic==16) // White Light
                    {
                        bt0.pic=19
                    }
                    if(bt0.pic==17) // RGBW Light
                    {
                        bt0.pic=20
                    }
                    bt0state.val=1
                }else
                {
                    if(bt0.pic==18) // Fan
                    {
                        bt0.pic=15
                    }
                    if(bt0.pic==19) // White Light
                    {
                        bt0.pic=16
                    }
                    if(bt0.pic==20) // RGBW Light
                    {
                        bt0.pic=17
                    }
                    bt0state.val=0
                }
                // Off Switch
            }
            if(bt0type.val==1)// Light (RGBKW) Released (just toggle)
            {
                rgbwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"0\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt0state.val==0) // Switch to on
                {
                    if(bt0.pic==15) // Fan
                    {
                        bt0.pic=18
                    }
                    if(bt0.pic==16) // White Light
                    {
                        bt0.pic=19
                    }
                    if(bt0.pic==17) // RGBW Light
                    {
                        bt0.pic=20
                    }
                    bt0state.val=1
                }else
                {
                    if(bt0.pic==18) // Fan
                    {
                        bt0.pic=15
                    }
                    if(bt0.pic==19) // White Light
                    {
                        bt0.pic=16
                    }
                    if(bt0.pic==20) // RGBW Light
                    {
                        bt0.pic=17
                    }
                    bt0state.val=0
                }
                // Off Switch
            }
            if(bt0type.val==2)// Light (KW) Released (just toggle)
            {
                rgbkwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"0\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt0state.val==0) // Switch to on
                {
                    if(bt0.pic==15) // Fan
                    {
                        bt0.pic=18
                    }
                    if(bt0.pic==16) // White Light
                    {
                        bt0.pic=19
                    }
                    if(bt0.pic==17) // RGBW Light
                    {
                        bt0.pic=20
                    }
                    bt0state.val=1
                }else
                {
                    if(bt0.pic==18) // Fan
                    {
                        bt0.pic=15
                    }
                    if(bt0.pic==19) // White Light
                    {
                        bt0.pic=16
                    }
                    if(bt0.pic==20) // RGBW Light
                    {
                        bt0.pic=17
                    }
                    bt0state.val=0
                }
                // Off Switch
            }
            if(bt0type.val==3) // Dimmer Released (just toggle)
            {
                kwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"0\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt0state.val==0) // Switch to on
                {
                    if(bt0.pic==15) // Fan
                    {
                        bt0.pic=18
                    }
                    if(bt0.pic==16) // White Light
                    {
                        bt0.pic=19
                    }
                    if(bt0.pic==17) // RGBW Light
                    {
                        bt0.pic=20
                    }
                    bt0state.val=1
                }else
                {
                    if(bt0.pic==18) // Fan
                    {
                        bt0.pic=15
                    }
                    if(bt0.pic==19) // White Light
                    {
                        bt0.pic=16
                    }
                    if(bt0.pic==20) // RGBW Light
                    {
                        bt0.pic=17
                    }
                    bt0state.val=0
                }
                // Off Switch
            }
            if(bt0type.val==4) // Dimmer Released (just toggle)
            {
                dimhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"0\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt0state.val==0) // Switch to on
                {
                    if(bt0.pic==15) // Fan
                    {
                        bt0.pic=18
                    }
                    if(bt0.pic==16) // White Light
                    {
                        bt0.pic=19
                    }
                    if(bt0.pic==17) // RGBW Light
                    {
                        bt0.pic=20
                    }
                    bt0state.val=1
                }else
                {
                    if(bt0.pic==18) // Fan
                    {
                        bt0.pic=15
                    }
                    if(bt0.pic==19) // White Light
                    {
                        bt0.pic=16
                    }
                    if(bt0.pic==20) // RGBW Light
                    {
                        bt0.pic=17
                    }
                    bt0state.val=0
                }
                // Off Switch
            }
        
Picture bt1
    Attributes
        ID                                  : 3
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
    
    Events
        Touch Press Event
            // Sets the trigger name and id for a potentional submenu
            varstor.smtrigid.val=1
            varstor.smtrigname.txt=bt1name.txt
            if(bt1type.val==0) // Light (RGBW) if held goto submenu
            {
                rgbhold.en=1
            }
            if(bt1type.val==1) // Light (RGBKW)
            {
                rgbwhold.en=1
            }
            if(bt1type.val==2) // Light (KW)
            {
                rgbkwhold.en=1
            }
            if(bt1type.val==3) // Dimmer
            {
                kwhold.en=1
            }
            if(bt1type.val==4) // Dimmer
            {
                dimhold.en=1
            }
            if(bt1type.val==5) // Toggle
            {
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"1\",\"action\":\"toggle\"}}",0
                if(bt1state.val==0) // Switch to on
                {
                    if(bt1.pic==15) // Fan
                    {
                        bt1.pic=18
                    }
                    if(bt1.pic==16) // White Light
                    {
                        bt1.pic=19
                    }
                    if(bt1.pic==17) // RGBW Light
                    {
                        bt1.pic=20
                    }
                    bt1state.val=1
                }else
                {
                    if(bt1.pic==18) // Fan
                    {
                        bt1.pic=15
                    }
                    if(bt1.pic==19) // White Light
                    {
                        bt1.pic=16
                    }
                    if(bt1.pic==20) // RGBW Light
                    {
                        bt1.pic=17
                    }
                    bt1state.val=0
                }
            }
            if(bt1type.val==6) // static
            {
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"1\",\"action\":\"run\"}}",0
            }
        
        Touch Release Event
            if(bt1type.val==0)// Light (RGBW) Released (just toggle)
            {
                rgbhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"1\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt1state.val==0) // Switch to on
                {
                    if(bt1.pic==15) // Fan
                    {
                        bt1.pic=18
                    }
                    if(bt1.pic==16) // White Light
                    {
                        bt1.pic=19
                    }
                    if(bt1.pic==17) // RGBW Light
                    {
                        bt1.pic=20
                    }
                    bt1state.val=1
                }else
                {
                    if(bt1.pic==18) // Fan
                    {
                        bt1.pic=15
                    }
                    if(bt1.pic==19) // White Light
                    {
                        bt1.pic=16
                    }
                    if(bt1.pic==20) // RGBW Light
                    {
                        bt1.pic=17
                    }
                    bt1state.val=0
                }
                // Off Switch
            }
            if(bt1type.val==1)// Light (RGBKW) Released (just toggle)
            {
                rgbwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"1\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt1state.val==0) // Switch to on
                {
                    if(bt1.pic==15) // Fan
                    {
                        bt1.pic=18
                    }
                    if(bt1.pic==16) // White Light
                    {
                        bt1.pic=19
                    }
                    if(bt1.pic==17) // RGBW Light
                    {
                        bt1.pic=20
                    }
                    bt1state.val=1
                }else
                {
                    if(bt1.pic==18) // Fan
                    {
                        bt1.pic=15
                    }
                    if(bt1.pic==19) // White Light
                    {
                        bt1.pic=16
                    }
                    if(bt1.pic==20) // RGBW Light
                    {
                        bt1.pic=17
                    }
                    bt1state.val=0
                }
                // Off Switch
            }
            if(bt1type.val==2)// Light (KW) Released (just toggle)
            {
                rgbkwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"1\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt1state.val==0) // Switch to on
                {
                    if(bt1.pic==15) // Fan
                    {
                        bt1.pic=18
                    }
                    if(bt1.pic==16) // White Light
                    {
                        bt1.pic=19
                    }
                    if(bt1.pic==17) // RGBW Light
                    {
                        bt1.pic=20
                    }
                    bt1state.val=1
                }else
                {
                    if(bt1.pic==18) // Fan
                    {
                        bt1.pic=15
                    }
                    if(bt1.pic==19) // White Light
                    {
                        bt1.pic=16
                    }
                    if(bt1.pic==20) // RGBW Light
                    {
                        bt1.pic=17
                    }
                    bt1state.val=0
                }
                // Off Switch
            }
            if(bt1type.val==3) // Dimmer Released (just toggle)
            {
                kwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"1\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt1state.val==0) // Switch to on
                {
                    if(bt1.pic==15) // Fan
                    {
                        bt1.pic=18
                    }
                    if(bt1.pic==16) // White Light
                    {
                        bt1.pic=19
                    }
                    if(bt1.pic==17) // RGBW Light
                    {
                        bt1.pic=20
                    }
                    bt1state.val=1
                }else
                {
                    if(bt1.pic==18) // Fan
                    {
                        bt1.pic=15
                    }
                    if(bt1.pic==19) // White Light
                    {
                        bt1.pic=16
                    }
                    if(bt1.pic==20) // RGBW Light
                    {
                        bt1.pic=17
                    }
                    bt1state.val=0
                }
                // Off Switch
            }
            if(bt1type.val==4) // Dimmer Released (just toggle)
            {
                dimhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"1\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt1state.val==0) // Switch to on
                {
                    if(bt1.pic==15) // Fan
                    {
                        bt1.pic=18
                    }
                    if(bt1.pic==16) // White Light
                    {
                        bt1.pic=19
                    }
                    if(bt1.pic==17) // RGBW Light
                    {
                        bt1.pic=20
                    }
                    bt1state.val=1
                }else
                {
                    if(bt1.pic==18) // Fan
                    {
                        bt1.pic=15
                    }
                    if(bt1.pic==19) // White Light
                    {
                        bt1.pic=16
                    }
                    if(bt1.pic==20) // RGBW Light
                    {
                        bt1.pic=17
                    }
                    bt1state.val=0
                }
                // Off Switch
            }
        
Picture bt2
    Attributes
        ID                                  : 4
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
    
    Events
        Touch Press Event
            // Sets the trigger name and id for a potentional submenu
            varstor.smtrigid.val=2
            varstor.smtrigname.txt=bt2name.txt
            if(bt2type.val==0) // Light (RGBW) if held goto submenu
            {
                rgbhold.en=1
            }
            if(bt2type.val==1) // Light (RGBKW)
            {
                rgbwhold.en=1
            }
            if(bt2type.val==2) // Light (KW)
            {
                rgbkwhold.en=1
            }
            if(bt2type.val==3) // Dimmer
            {
                kwhold.en=1
            }
            if(bt2type.val==4) // Dimmer
            {
                dimhold.en=1
            }
            if(bt2type.val==5) // Toggle
            {
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"2\",\"action\":\"toggle\"}}",0
                if(bt2state.val==0) // Switch to on
                {
                    if(bt2.pic==15) // Fan
                    {
                        bt2.pic=18
                    }
                    if(bt2.pic==16) // White Light
                    {
                        bt2.pic=19
                    }
                    if(bt2.pic==17) // RGBW Light
                    {
                        bt2.pic=20
                    }
                    bt2state.val=1
                }else
                {
                    if(bt2.pic==18) // Fan
                    {
                        bt2.pic=15
                    }
                    if(bt2.pic==19) // White Light
                    {
                        bt2.pic=16
                    }
                    if(bt2.pic==20) // RGBW Light
                    {
                        bt2.pic=17
                    }
                    bt2state.val=0
                }
            }
            if(bt2type.val==6) // static
            {
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"2\",\"action\":\"run\"}}",0
            }
        
        Touch Release Event
            if(bt2type.val==0)// Light (RGBW) Released (just toggle)
            {
                rgbhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"2\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt2state.val==0) // Switch to on
                {
                    if(bt2.pic==15) // Fan
                    {
                        bt2.pic=18
                    }
                    if(bt2.pic==16) // White Light
                    {
                        bt2.pic=19
                    }
                    if(bt2.pic==17) // RGBW Light
                    {
                        bt2.pic=20
                    }
                    bt2state.val=1
                }else
                {
                    if(bt2.pic==18) // Fan
                    {
                        bt2.pic=15
                    }
                    if(bt2.pic==19) // White Light
                    {
                        bt2.pic=16
                    }
                    if(bt2.pic==20) // RGBW Light
                    {
                        bt2.pic=17
                    }
                    bt2state.val=0
                }
                // Off Switch
            }
            if(bt2type.val==1)// Light (RGBKW) Released (just toggle)
            {
                rgbwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"2\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt2state.val==0) // Switch to on
                {
                    if(bt2.pic==15) // Fan
                    {
                        bt2.pic=18
                    }
                    if(bt2.pic==16) // White Light
                    {
                        bt2.pic=19
                    }
                    if(bt2.pic==17) // RGBW Light
                    {
                        bt2.pic=20
                    }
                    bt2state.val=1
                }else
                {
                    if(bt2.pic==18) // Fan
                    {
                        bt2.pic=15
                    }
                    if(bt2.pic==19) // White Light
                    {
                        bt2.pic=16
                    }
                    if(bt2.pic==20) // RGBW Light
                    {
                        bt2.pic=17
                    }
                    bt2state.val=0
                }
                // Off Switch
            }
            if(bt2type.val==2)// Light (KW) Released (just toggle)
            {
                rgbkwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"2\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt2state.val==0) // Switch to on
                {
                    if(bt2.pic==15) // Fan
                    {
                        bt2.pic=18
                    }
                    if(bt2.pic==16) // White Light
                    {
                        bt2.pic=19
                    }
                    if(bt2.pic==17) // RGBW Light
                    {
                        bt2.pic=20
                    }
                    bt2state.val=1
                }else
                {
                    if(bt2.pic==18) // Fan
                    {
                        bt2.pic=15
                    }
                    if(bt2.pic==19) // White Light
                    {
                        bt2.pic=16
                    }
                    if(bt2.pic==20) // RGBW Light
                    {
                        bt2.pic=17
                    }
                    bt2state.val=0
                }
                // Off Switch
            }
            if(bt2type.val==3) // Dimmer Released (just toggle)
            {
                kwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"2\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt2state.val==0) // Switch to on
                {
                    if(bt2.pic==15) // Fan
                    {
                        bt2.pic=18
                    }
                    if(bt2.pic==16) // White Light
                    {
                        bt2.pic=19
                    }
                    if(bt2.pic==17) // RGBW Light
                    {
                        bt2.pic=20
                    }
                    bt2state.val=1
                }else
                {
                    if(bt2.pic==18) // Fan
                    {
                        bt2.pic=15
                    }
                    if(bt2.pic==19) // White Light
                    {
                        bt2.pic=16
                    }
                    if(bt2.pic==20) // RGBW Light
                    {
                        bt2.pic=17
                    }
                    bt2state.val=0
                }
                // Off Switch
            }
            if(bt2type.val==4) // Dimmer Released (just toggle)
            {
                dimhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"2\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt2state.val==0) // Switch to on
                {
                    if(bt2.pic==15) // Fan
                    {
                        bt2.pic=18
                    }
                    if(bt2.pic==16) // White Light
                    {
                        bt2.pic=19
                    }
                    if(bt2.pic==17) // RGBW Light
                    {
                        bt2.pic=20
                    }
                    bt2state.val=1
                }else
                {
                    if(bt2.pic==18) // Fan
                    {
                        bt2.pic=15
                    }
                    if(bt2.pic==19) // White Light
                    {
                        bt2.pic=16
                    }
                    if(bt2.pic==20) // RGBW Light
                    {
                        bt2.pic=17
                    }
                    bt2state.val=0
                }
                // Off Switch
            }
        
Picture bt3
    Attributes
        ID                                  : 9
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
    
    Events
        Touch Press Event
            // Sets the trigger name and id for a potentional submenu
            varstor.smtrigid.val=3
            varstor.smtrigname.txt=bt3name.txt
            if(bt3type.val==0) // Light (RGBW) if held goto submenu
            {
                rgbhold.en=1
            }
            if(bt3type.val==1) // Light (RGBKW)
            {
                rgbwhold.en=1
            }
            if(bt3type.val==2) // Light (KW)
            {
                rgbkwhold.en=1
            }
            if(bt3type.val==3) // Dimmer
            {
                kwhold.en=1
            }
            if(bt3type.val==4) // Dimmer
            {
                dimhold.en=1
            }
            if(bt3type.val==5) // Toggle
            {
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"3\",\"action\":\"toggle\"}}",0
                if(bt3state.val==0) // Switch to on
                {
                    if(bt3.pic==15) // Fan
                    {
                        bt3.pic=18
                    }
                    if(bt3.pic==16) // White Light
                    {
                        bt3.pic=19
                    }
                    if(bt3.pic==17) // RGBW Light
                    {
                        bt3.pic=20
                    }
                    bt3state.val=1
                }else
                {
                    if(bt3.pic==18) // Fan
                    {
                        bt3.pic=15
                    }
                    if(bt3.pic==19) // White Light
                    {
                        bt3.pic=16
                    }
                    if(bt3.pic==20) // RGBW Light
                    {
                        bt3.pic=17
                    }
                    bt3state.val=0
                }
            }
            if(bt3type.val==6) // static
            {
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"3\",\"action\":\"run\"}}",0
            }
        
        Touch Release Event
            if(bt3type.val==0)// Light (RGBW) Released (just toggle)
            {
                rgbhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"3\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt3state.val==0) // Switch to on
                {
                    if(bt3.pic==15) // Fan
                    {
                        bt3.pic=18
                    }
                    if(bt3.pic==16) // White Light
                    {
                        bt3.pic=19
                    }
                    if(bt3.pic==17) // RGBW Light
                    {
                        bt3.pic=20
                    }
                    bt3state.val=1
                }else
                {
                    if(bt3.pic==18) // Fan
                    {
                        bt3.pic=15
                    }
                    if(bt3.pic==19) // White Light
                    {
                        bt3.pic=16
                    }
                    if(bt3.pic==20) // RGBW Light
                    {
                        bt3.pic=17
                    }
                    bt3state.val=0
                }
                // Off Switch
            }
            if(bt3type.val==1)// Light (RGBKW) Released (just toggle)
            {
                rgbwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"3\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt3state.val==0) // Switch to on
                {
                    if(bt3.pic==15) // Fan
                    {
                        bt3.pic=18
                    }
                    if(bt3.pic==16) // White Light
                    {
                        bt3.pic=19
                    }
                    if(bt3.pic==17) // RGBW Light
                    {
                        bt3.pic=20
                    }
                    bt3state.val=1
                }else
                {
                    if(bt3.pic==18) // Fan
                    {
                        bt3.pic=15
                    }
                    if(bt3.pic==19) // White Light
                    {
                        bt3.pic=16
                    }
                    if(bt3.pic==20) // RGBW Light
                    {
                        bt3.pic=17
                    }
                    bt3state.val=0
                }
                // Off Switch
            }
            if(bt3type.val==2)// Light (KW) Released (just toggle)
            {
                rgbkwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"3\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt3state.val==0) // Switch to on
                {
                    if(bt3.pic==15) // Fan
                    {
                        bt3.pic=18
                    }
                    if(bt3.pic==16) // White Light
                    {
                        bt3.pic=19
                    }
                    if(bt3.pic==17) // RGBW Light
                    {
                        bt3.pic=20
                    }
                    bt3state.val=1
                }else
                {
                    if(bt3.pic==18) // Fan
                    {
                        bt3.pic=15
                    }
                    if(bt3.pic==19) // White Light
                    {
                        bt3.pic=16
                    }
                    if(bt3.pic==20) // RGBW Light
                    {
                        bt3.pic=17
                    }
                    bt3state.val=0
                }
                // Off Switch
            }
            if(bt3type.val==3) // Dimmer Released (just toggle)
            {
                kwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"3\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt3state.val==0) // Switch to on
                {
                    if(bt3.pic==15) // Fan
                    {
                        bt3.pic=18
                    }
                    if(bt3.pic==16) // White Light
                    {
                        bt3.pic=19
                    }
                    if(bt3.pic==17) // RGBW Light
                    {
                        bt3.pic=20
                    }
                    bt3state.val=1
                }else
                {
                    if(bt3.pic==18) // Fan
                    {
                        bt3.pic=15
                    }
                    if(bt3.pic==19) // White Light
                    {
                        bt3.pic=16
                    }
                    if(bt3.pic==20) // RGBW Light
                    {
                        bt3.pic=17
                    }
                    bt3state.val=0
                }
                // Off Switch
            }
            if(bt3type.val==4) // Dimmer Released (just toggle)
            {
                dimhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"3\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt3state.val==0) // Switch to on
                {
                    if(bt3.pic==15) // Fan
                    {
                        bt3.pic=18
                    }
                    if(bt3.pic==16) // White Light
                    {
                        bt3.pic=19
                    }
                    if(bt3.pic==17) // RGBW Light
                    {
                        bt3.pic=20
                    }
                    bt3state.val=1
                }else
                {
                    if(bt3.pic==18) // Fan
                    {
                        bt3.pic=15
                    }
                    if(bt3.pic==19) // White Light
                    {
                        bt3.pic=16
                    }
                    if(bt3.pic==20) // RGBW Light
                    {
                        bt3.pic=17
                    }
                    bt3state.val=0
                }
                // Off Switch
            }
        
Picture bt4
    Attributes
        ID                                  : 11
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
    
    Events
        Touch Press Event
            // Sets the trigger name and id for a potentional submenu
            varstor.smtrigid.val=4
            varstor.smtrigname.txt=bt4name.txt
            if(bt4type.val==0) // Light (RGBW) if held goto submenu
            {
                rgbhold.en=1
            }
            if(bt4type.val==1) // Light (RGBKW)
            {
                rgbwhold.en=1
            }
            if(bt4type.val==2) // Light (KW)
            {
                rgbkwhold.en=1
            }
            if(bt4type.val==3) // Dimmer
            {
                kwhold.en=1
            }
            if(bt4type.val==4) // Dimmer
            {
                dimhold.en=1
            }
            if(bt4type.val==5) // Toggle
            {
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"4\",\"action\":\"toggle\"}}",0
                if(bt4state.val==0) // Switch to on
                {
                    if(bt4.pic==15) // Fan
                    {
                        bt4.pic=18
                    }
                    if(bt4.pic==16) // White Light
                    {
                        bt4.pic=19
                    }
                    if(bt4.pic==17) // RGBW Light
                    {
                        bt4.pic=20
                    }
                    bt4state.val=1
                }else
                {
                    if(bt4.pic==18) // Fan
                    {
                        bt4.pic=15
                    }
                    if(bt4.pic==19) // White Light
                    {
                        bt4.pic=16
                    }
                    if(bt4.pic==20) // RGBW Light
                    {
                        bt4.pic=17
                    }
                    bt4state.val=0
                }
            }
            if(bt4type.val==6) // static
            {
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"4\",\"action\":\"run\"}}",0
            }
        
        Touch Release Event
            if(bt4type.val==0)// Light (RGBW) Released (just toggle)
            {
                rgbhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"4\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt4state.val==0) // Switch to on
                {
                    if(bt4.pic==15) // Fan
                    {
                        bt4.pic=18
                    }
                    if(bt4.pic==16) // White Light
                    {
                        bt4.pic=19
                    }
                    if(bt4.pic==17) // RGBW Light
                    {
                        bt4.pic=20
                    }
                    bt4state.val=1
                }else
                {
                    if(bt4.pic==18) // Fan
                    {
                        bt4.pic=15
                    }
                    if(bt4.pic==19) // White Light
                    {
                        bt4.pic=16
                    }
                    if(bt4.pic==20) // RGBW Light
                    {
                        bt4.pic=17
                    }
                    bt4state.val=0
                }
                // Off Switch
            }
            if(bt4type.val==1)// Light (RGBKW) Released (just toggle)
            {
                rgbwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"4\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt4state.val==0) // Switch to on
                {
                    if(bt4.pic==15) // Fan
                    {
                        bt4.pic=18
                    }
                    if(bt4.pic==16) // White Light
                    {
                        bt4.pic=19
                    }
                    if(bt4.pic==17) // RGBW Light
                    {
                        bt4.pic=20
                    }
                    bt4state.val=1
                }else
                {
                    if(bt4.pic==18) // Fan
                    {
                        bt4.pic=15
                    }
                    if(bt4.pic==19) // White Light
                    {
                        bt4.pic=16
                    }
                    if(bt4.pic==20) // RGBW Light
                    {
                        bt4.pic=17
                    }
                    bt4state.val=0
                }
                // Off Switch
            }
            if(bt4type.val==2)// Light (KW) Released (just toggle)
            {
                rgbkwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"4\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt4state.val==0) // Switch to on
                {
                    if(bt4.pic==15) // Fan
                    {
                        bt4.pic=18
                    }
                    if(bt4.pic==16) // White Light
                    {
                        bt4.pic=19
                    }
                    if(bt4.pic==17) // RGBW Light
                    {
                        bt4.pic=20
                    }
                    bt4state.val=1
                }else
                {
                    if(bt4.pic==18) // Fan
                    {
                        bt4.pic=15
                    }
                    if(bt4.pic==19) // White Light
                    {
                        bt4.pic=16
                    }
                    if(bt4.pic==20) // RGBW Light
                    {
                        bt4.pic=17
                    }
                    bt4state.val=0
                }
                // Off Switch
            }
            if(bt4type.val==3) // Dimmer Released (just toggle)
            {
                kwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"4\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt4state.val==0) // Switch to on
                {
                    if(bt4.pic==15) // Fan
                    {
                        bt4.pic=18
                    }
                    if(bt4.pic==16) // White Light
                    {
                        bt4.pic=19
                    }
                    if(bt4.pic==17) // RGBW Light
                    {
                        bt4.pic=20
                    }
                    bt4state.val=1
                }else
                {
                    if(bt4.pic==18) // Fan
                    {
                        bt4.pic=15
                    }
                    if(bt4.pic==19) // White Light
                    {
                        bt4.pic=16
                    }
                    if(bt4.pic==20) // RGBW Light
                    {
                        bt4.pic=17
                    }
                    bt4state.val=0
                }
                // Off Switch
            }
            if(bt4type.val==4) // Dimmer Released (just toggle)
            {
                dimhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"4\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt4state.val==0) // Switch to on
                {
                    if(bt4.pic==15) // Fan
                    {
                        bt4.pic=18
                    }
                    if(bt4.pic==16) // White Light
                    {
                        bt4.pic=19
                    }
                    if(bt4.pic==17) // RGBW Light
                    {
                        bt4.pic=20
                    }
                    bt4state.val=1
                }else
                {
                    if(bt4.pic==18) // Fan
                    {
                        bt4.pic=15
                    }
                    if(bt4.pic==19) // White Light
                    {
                        bt4.pic=16
                    }
                    if(bt4.pic==20) // RGBW Light
                    {
                        bt4.pic=17
                    }
                    bt4state.val=0
                }
                // Off Switch
            }
        
Picture bt5
    Attributes
        ID                                  : 12
        Scope                               : local
        Dragging                            : 0
        Disable release event after dragging: 0
        Send Component ID                   : disabled
    
    Events
        Touch Press Event
            // Sets the trigger name and id for a potentional submenu
            varstor.smtrigid.val=5
            varstor.smtrigname.txt=bt5name.txt
            if(bt5type.val==0) // Light (RGBW) if held goto submenu
            {
                rgbhold.en=1
            }
            if(bt5type.val==1) // Light (RGBKW)
            {
                rgbwhold.en=1
            }
            if(bt5type.val==2) // Light (KW)
            {
                rgbkwhold.en=1
            }
            if(bt5type.val==3) // Dimmer
            {
                kwhold.en=1
            }
            if(bt5type.val==4) // Dimmer
            {
                dimhold.en=1
            }
            if(bt5type.val==5) // Toggle
            {
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"5\",\"action\":\"toggle\"}}",0
                if(bt5state.val==0) // Switch to on
                {
                    if(bt5.pic==15) // Fan
                    {
                        bt5.pic=18
                    }
                    if(bt5.pic==16) // White Light
                    {
                        bt5.pic=19
                    }
                    if(bt5.pic==17) // RGBW Light
                    {
                        bt5.pic=20
                    }
                    bt5state.val=1
                }else
                {
                    if(bt5.pic==18) // Fan
                    {
                        bt5.pic=15
                    }
                    if(bt5.pic==19) // White Light
                    {
                        bt5.pic=16
                    }
                    if(bt5.pic==20) // RGBW Light
                    {
                        bt5.pic=17
                    }
                    bt5state.val=0
                }
            }
            if(bt5type.val==6) // static
            {
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"5\",\"action\":\"run\"}}",0
            }
        
        Touch Release Event
            if(bt5type.val==0)// Light (RGBW) Released (just toggle)
            {
                rgbhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"5\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt5state.val==0) // Switch to on
                {
                    if(bt5.pic==15) // Fan
                    {
                        bt5.pic=18
                    }
                    if(bt5.pic==16) // White Light
                    {
                        bt5.pic=19
                    }
                    if(bt5.pic==17) // RGBW Light
                    {
                        bt5.pic=20
                    }
                    bt5state.val=1
                }else
                {
                    if(bt5.pic==18) // Fan
                    {
                        bt5.pic=15
                    }
                    if(bt5.pic==19) // White Light
                    {
                        bt5.pic=16
                    }
                    if(bt5.pic==20) // RGBW Light
                    {
                        bt5.pic=17
                    }
                    bt5state.val=0
                }
                // Off Switch
            }
            if(bt5type.val==1)// Light (RGBKW) Released (just toggle)
            {
                rgbwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"5\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt5state.val==0) // Switch to on
                {
                    if(bt5.pic==15) // Fan
                    {
                        bt5.pic=18
                    }
                    if(bt5.pic==16) // White Light
                    {
                        bt5.pic=19
                    }
                    if(bt5.pic==17) // RGBW Light
                    {
                        bt5.pic=20
                    }
                    bt5state.val=1
                }else
                {
                    if(bt5.pic==18) // Fan
                    {
                        bt5.pic=15
                    }
                    if(bt5.pic==19) // White Light
                    {
                        bt5.pic=16
                    }
                    if(bt5.pic==20) // RGBW Light
                    {
                        bt5.pic=17
                    }
                    bt5state.val=0
                }
                // Off Switch
            }
            if(bt5type.val==2)// Light (KW) Released (just toggle)
            {
                rgbkwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"5\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt5state.val==0) // Switch to on
                {
                    if(bt5.pic==15) // Fan
                    {
                        bt5.pic=18
                    }
                    if(bt5.pic==16) // White Light
                    {
                        bt5.pic=19
                    }
                    if(bt5.pic==17) // RGBW Light
                    {
                        bt5.pic=20
                    }
                    bt5state.val=1
                }else
                {
                    if(bt5.pic==18) // Fan
                    {
                        bt5.pic=15
                    }
                    if(bt5.pic==19) // White Light
                    {
                        bt5.pic=16
                    }
                    if(bt5.pic==20) // RGBW Light
                    {
                        bt5.pic=17
                    }
                    bt5state.val=0
                }
                // Off Switch
            }
            if(bt5type.val==3) // Dimmer Released (just toggle)
            {
                kwhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"5\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt5state.val==0) // Switch to on
                {
                    if(bt5.pic==15) // Fan
                    {
                        bt5.pic=18
                    }
                    if(bt5.pic==16) // White Light
                    {
                        bt5.pic=19
                    }
                    if(bt5.pic==17) // RGBW Light
                    {
                        bt5.pic=20
                    }
                    bt5state.val=1
                }else
                {
                    if(bt5.pic==18) // Fan
                    {
                        bt5.pic=15
                    }
                    if(bt5.pic==19) // White Light
                    {
                        bt5.pic=16
                    }
                    if(bt5.pic==20) // RGBW Light
                    {
                        bt5.pic=17
                    }
                    bt5state.val=0
                }
                // Off Switch
            }
            if(bt5type.val==4) // Dimmer Released (just toggle)
            {
                dimhold.en=0
                prints "{\"update\":\"btn\",\"data\":{\"btn\":\"5\",\"action\":\"toggle\"}}",0
                // Handles changing the state based on toggles
                if(bt5state.val==0) // Switch to on
                {
                    if(bt5.pic==15) // Fan
                    {
                        bt5.pic=18
                    }
                    if(bt5.pic==16) // White Light
                    {
                        bt5.pic=19
                    }
                    if(bt5.pic==17) // RGBW Light
                    {
                        bt5.pic=20
                    }
                    bt5state.val=1
                }else
                {
                    if(bt5.pic==18) // Fan
                    {
                        bt5.pic=15
                    }
                    if(bt5.pic==19) // White Light
                    {
                        bt5.pic=16
                    }
                    if(bt5.pic==20) // RGBW Light
                    {
                        bt5.pic=17
                    }
                    bt5state.val=0
                }
                // Off Switch
            }
        
Timer hometimer
    Attributes
        ID         : 15
        Scope      : local
        Period (ms): 15000
        Enabled    : yes
    
    Events
        Timer Event
            if(varstor.disgth.val==0)
            {
                page Home
            }
        
Timer swipestore
    Attributes
        ID         : 16
        Scope      : local
        Period (ms): 50
        Enabled    : no
    
    Events
        Timer Event
            endx=tch0
            endy=tch1
        
Timer sreadbuffer
    Attributes
        ID         : 17
        Scope      : local
        Period (ms): 500
        Enabled    : no
    
    Events
        Timer Event
            // Check the ReadBuffer
            if(usize>=3)  // this takes into account the  "(1 " 3 characters with the space
            {
                // If the size is greater than 3 and the last one is the end marker keep waiting
                if(varstor.buff.txt!="}")
                {
                    varstor.serror.val++
                    varstor.buff.txt="0"
                    ucopy varstor.buff.txt,usize-4,usize-3,0
                    substr varstor.buff.txt,varstor.buff.txt,0,1
                }else
                {
                    varstor.serror.val=0
                    // In this scenario we got the message end mark so we can parse i
                    // Status update
                    // Data received
                    ucopy varstor.buff.txt,0,usize-3,0  //copy all data from buffer to the variable data.txt and remove header
                    // prints buff.txt,0 // prints what you sent
                    // clear buffer
                    code_c
                    //
                    // Action  Parser
                    spstr varstor.buff.txt,varstor.com.txt,"{\"action\":\"",1 // {"action":"
                    spstr varstor.com.txt,varstor.com.txt,"\"",0 // "}
                    strlen varstor.com.txt,varstor.txttonum.val
                    if(varstor.txttonum.val>1)
                    {
                        if(varstor.com.txt=="wake")
                        {
                            page Home
                            dim=varstor.brightness.val
                        }
                        if(varstor.com.txt=="dim")
                        {
                            spstr varstor.buff.txt,varstor.com.txt,"\",\"value\":\"",1 // ","value":"
                            spstr varstor.com.txt,varstor.com.txt,"\"}",0 // "}
                            covx varstor.com.txt,varstor.txttonum.val,0,0
                            varstor.brightness.val=varstor.txttonum.val
                            dim=varstor.brightness.val
                        }
                        if(varstor.com.txt=="sleep")
                        {
                            dim=0
                            page Sleep
                        }
                        // {"action":"refresh","data":{"btn_0":"0","btn_1":"0","btn_2":"0","btn_3":"0","btn_4":"0","btn_5":"0"}}
                        if(varstor.com.txt=="refresh")
                        {
                            spstr varstor.buff.txt,varstor.com.txt,"{\"btn_0\":\"",1
                            spstr varstor.com.txt,varstor.com.txt,"\",\"btn_1\":\"",0
                            covx varstor.com.txt,varstor.txttonum.val,0,0
                            bt0state.val=varstor.txttonum.val
                            spstr varstor.buff.txt,varstor.com.txt,"\"btn_1\":\"",1
                            spstr varstor.com.txt,varstor.com.txt,"\",\"btn_2\":\"",0
                            covx varstor.com.txt,varstor.txttonum.val,0,0
                            bt1state.val=varstor.txttonum.val
                            spstr varstor.buff.txt,varstor.com.txt,"\"btn_2\":\"",1
                            spstr varstor.com.txt,varstor.com.txt,"\",\"btn_3\":\"",0
                            covx varstor.com.txt,varstor.txttonum.val,0,0
                            bt2state.val=varstor.txttonum.val
                            spstr varstor.buff.txt,varstor.com.txt,"\"btn_3\":\"",1
                            spstr varstor.com.txt,varstor.com.txt,"\",\"btn_4\":\"",0
                            covx varstor.com.txt,varstor.txttonum.val,0,0
                            bt3state.val=varstor.txttonum.val
                            spstr varstor.buff.txt,varstor.com.txt,"\"btn_4\":\"",1
                            spstr varstor.com.txt,varstor.com.txt,"\",\"btn_5\":\"",0
                            covx varstor.com.txt,varstor.txttonum.val,0,0
                            bt4state.val=varstor.txttonum.val
                            spstr varstor.buff.txt,varstor.com.txt,"\"btn_5\":\"",1
                            spstr varstor.com.txt,varstor.com.txt,"\"}}",0
                            covx varstor.com.txt,varstor.txttonum.val,0,0
                            bt5state.val=varstor.txttonum.val
                            // Forces page refresh to load new state on the refresh action
                            page SixBtn
                        }
                        if(varstor.com.txt=="date")
                        {
                            // {"action":"date","data":{"date":"02|28|2022","time":"50:20"}}
                            spstr varstor.buff.txt,varstor.com.txt,"{\"date\":\"",1  // {"date":"
                            spstr varstor.com.txt,varstor.datestor.txt,"\",\"time\"",0 // ","time"
                            spstr varstor.buff.txt,varstor.com.txt,"\"time\":\"",1 // ","time":"
                            spstr varstor.com.txt,varstor.timestor.txt,"\"}}",0 // "}}
                        }
                        if(varstor.com.txt=="weather")
                        {
                            // Weather Parser
                            // Valid Formats: Uses a single parser for both temp and weather so only one format may be used
                            // {"action":"weather","data":{"icon":"22","temp":"233"}}
                            // Icon
                            spstr varstor.buff.txt,varstor.com.txt,"{\"icon\":\"",1 // {"icon":"
                            spstr varstor.com.txt,varstor.com.txt,"\",\"temp\":\"",0
                            covx varstor.com.txt,varstor.weatherstor.val,0,0
                            // Temperature
                            spstr varstor.buff.txt,varstor.com.txt,"\",\"temp\":\"",1
                            spstr varstor.com.txt,varstor.tempstor.txt,"\"}}",0
                            // Directly stores the result of spstr into tempstor
                        }
                        if(varstor.com.txt=="notification")
                        {
                            // Notification Parser {"notification":""}
                            //{"action":"notification","data":{"notification":"02|28|2022"}}
                            spstr varstor.buff.txt,varstor.com.txt,"{\"notification\":\"",1 // {"notification":"
                            spstr varstor.com.txt,varstor.com.txt,"\"}}",0 // "}
                            varstor.notification.txt=varstor.com.txt
                        }
                    }
                }
                // After 10 tries (5 seconds) of failing to receive a full messsage the buffer resets
                if(varstor.serror.val>=10)
                {
                    code_c
                    varstor.serror.val=0
                }
            }
        
Timer rgbwhold
    Attributes
        ID         : 18
        Scope      : local
        Period (ms): 400
        Enabled    : no
    
    Events
        Timer Event
            varstor.smlastpage.val=1 // Sets the page to return to once the back button has been pressed
            page RGBWSubMenu
        
Timer dimhold
    Attributes
        ID         : 19
        Scope      : local
        Period (ms): 400
        Enabled    : no
    
    Events
        Timer Event
            varstor.smlastpage.val=1  // Sets the page to return to once the back button has been pressed
            page DimmerSubMenu
        
Timer rgbkwhold
    Attributes
        ID         : 26
        Scope      : local
        Period (ms): 400
        Enabled    : no
    
    Events
        Timer Event
            varstor.smlastpage.val=1 // Sets the page to return to once the back button has been pressed
            page RGBKWSubMenu
        
Timer kwhold
    Attributes
        ID         : 27
        Scope      : local
        Period (ms): 400
        Enabled    : no
    
    Events
        Timer Event
            varstor.smlastpage.val=1 // Sets the page to return to once the back button has been pressed
            page KWSubMenu
        
Timer notifier
    Attributes
        ID         : 34
        Scope      : local
        Period (ms): 1000
        Enabled    : yes
    
    Events
        Timer Event
            btlen varstor.notification.txt,varstor.notiflength.val
            if(varstor.notiflength.val>1)
            {
            }
        
Timer rgbhold
    Attributes
        ID         : 35
        Scope      : local
        Period (ms): 400
        Enabled    : no
    
    Events
        Timer Event
            varstor.smlastpage.val=1 // Sets the page to return to once the back button has been pressed
            page RGBSubMenu
        
Timer pagereader
    Attributes
        ID         : 37
        Scope      : local
        Period (ms): 50
        Enabled    : no
    
    Events
        Timer Event
            //  Waits 50ms for the next check (timer speed)
            varstor.perror.val++
            // This uses perror instead of serror to seperate two individual systems so it doesn't cause issues upon further additons of features
            // 5 Second page receive timeout if a value isn't received in 5 seconds kickout with an error
            varstor.buff.txt="0"
            ucopy varstor.buff.txt,usize-4,usize-3,0
            substr varstor.buff.txt,varstor.buff.txt,0,1
            // {"action":"page","type":"0","name":"Bedroom","info":["btn=0,type=0,name=Bob,icon=0,state=1","btn=1,type=1,name=e,icon=1,state=1","btn=2,type=2,name=Light,icon=0,state=1","btn=3,type=3,name=Zoomer,icon=0,state=0","btn=4,type=4,name=Light,icon=2","btn=5,type=5,name=test,icon=0,state=0"]}
            // {"action":"page","data":{"type":"0","name":"Bedroom","info":["btn=0,type=6,name=Bob,icon=0,state=0","btn=1,type=1,name=e,icon=1,state=1","btn=2,type=2,name=Light,icon=0,state=1","btn=3,type=3,name=Zoomer,icon=0,state=0","btn=4,type=4,name=Light,icon=2","btn=5,type=5,name=test,icon=0,state=0"]}}
            // The second way of sending information is a bit harder to parse and has the buffer start parsing data a character before the end, but adds more consistency so i went with that
            if(varstor.buff.txt=="}")  // this takes into account the  "(1 " 3 characters with the space and makes sure the data stream has ended
            {
                ucopy varstor.buff.txt,0,usize-3,0
                code_c
                // This section deals with generative page design on request from the panel
                // Begin Page Parser
                // Type
                varstor.com.txt="0" // Reset value
                spstr varstor.buff.txt,varstor.com.txt,"{\"action\":\"",1 // {"action":"
                spstr varstor.com.txt,varstor.com.txt,"\",\"data\":",0 // ","data":
                if(varstor.com.txt=="page")
                {
                    // Since we know the first value was successfully gotten we can do the rest safely
                    spstr varstor.buff.txt,varstor.com.txt,"{\"type\":\"",1 // {"type":"
                    spstr varstor.com.txt,varstor.com.txt,"\",\"name\":",0 // ","name":
                    strlen varstor.com.txt,varstor.txttonum.val //  {"date":"02|28|2022","time":"50|20"}
                    varstor.pagetype.txt=varstor.com.txt
                    // Position
                    varstor.com.txt="0" // Reset value
                    spstr varstor.buff.txt,varstor.com.txt,"\"name\":\"",1 // "name":"
                    spstr varstor.com.txt,varstor.com.txt,"\",\"info\"",0 // ","buttons"
                    strlen varstor.com.txt,varstor.txttonum.val //  {"date":"02|28|2022","time":"50|20"}
                    varstor.pagename.txt=varstor.com.txt
                    // Page Info
                    varstor.com.txt="0" // Reset value
                    spstr varstor.buff.txt,varstor.com.txt,"\"info\":[",1 // "buttons":[
                    spstr varstor.com.txt,varstor.com.txt,"]}}",0 // ]}
                    strlen varstor.com.txt,varstor.txttonum.val //  {"date":"02|28|2022","time":"50|20"}
                    varstor.pageinfo.txt=varstor.com.txt
                    varstor.pagereceived.val=1 // Send that a page has been receive
                }
            }
            // Checks for a timeout
            if(varstor.perror.val>=100) // Send error if page request timed out
            {
                prints "{\"indicator\":\"page_fail\"}",0
                varstor.perror.val=0 // Resets error for next read
                // Resets the value if you swipe right
                // If the current page is greater than 0 and if you swiped right swipedir=1 so you can just subtract by one 0 is left swipe
                if(varstor.currentpage.val>0&&varstor.swipedir.val==1) // Makes sure the page limit doesn't go above 10 (0 is home)
                {
                    varstor.currentpage.val-=1  // Sets page value back to the original (if you tried to go to 2 and it failed you are back at one)
                }
                // Resets the value if you swipe left
                if(varstor.currentpage.val<10&&varstor.swipedir.val==0) // Makes sure the page limit doesn't go above 10 (0 is home)
                {
                    varstor.currentpage.val+=1  // Sets page value back to the original (if you tried to go to 2 and it failed you are back at one)
                }
                pagereader.en=0
                sreadbuffer.en=1 // Re enables read buffer
            }
            // Checks to see if a page was successfully read
            if(varstor.pagereceived.val==1)
            {
                prints "{\"indicator\":\"page_success\"}",0 // Sends an update that the page was successfully received
                // Act upon received data
                varstor.loadedstate.val=0 // Declares that new item states have to be loaded on update
                if(varstor.pagetype.txt=="0") // Go to the page type selected
                {
                    page SixBtn
                }
                pagereader.en=0
                sreadbuffer.en=1 // Re enables read buffer
            }
        
TouchCap tc0
    Attributes
        ID   : 14
        Scope: local
        Value: 0
    
    Events
        Touch Press Event
            swipestore.en=1 // Start swipestore timer
            startx=tch0
            starty=tch1
        
        Touch Release Event
            dim=varstor.brightness.val // Set brightness to saved value (from HA)
            // This makes it so if you tap the screen it resets the timers of going to sleep
            hometimer.en=0
            hometimer.en=1 // Enable timer to calc down for dimming screen
            swipestore.en=0
            // Y Section
            diff=endy-starty
            if(diff>tolery||diff<toleryn)
            {
                if(endy>starty)
                {
                    //prints "swiped down",0
                }
                if(starty>endy)
                {
                    //prints "swiped up",0
                }
                // Resets touch points
                tch0=0
                tch1=0
                tch2=0
                tch3=0
            }else
            {
                //
                // Add tolerences so you cant swipe right with a small movement
                // X Section
                diff=endx-startx
                // If the difference is high enough we know an x swipe happened and can go further into selecting which side was swiped
                if(diff>tolerx||diff<tolerxn)
                {
                    // Right
                    if(startx>endx)
                    {
                        //prints "swiped right",0
                        varstor.swipedir.val=1
                        sreadbuffer.en=0 // Disables the read buffer to let the data only be accessed by this loop
                        if(varstor.currentpage.val<10) // Makes sure the page limit doesn't go above 10 (0 is home)
                        {
                            varstor.currentpage.val+=1
                        }
                        if(varstor.currentpage.val==0) // Home Check
                        {
                            page Home
                        }
                    }
                    // Left
                    if(endx>startx)
                    {
                        //prints "swiped left",0
                        varstor.swipedir.val=0
                        sreadbuffer.en=0 // Disables the read buffer to let the data only be accessed by this loop
                        if(varstor.currentpage.val>0) // Makes sure the page limit doesn't go below 0
                        {
                            varstor.currentpage.val-=1
                        }
                        if(varstor.currentpage.val==0) // Home Check
                        {
                            page Home
                        }
                    }
                    // Resets touch points
                    tch0=0
                    tch1=0
                    tch2=0
                    tch3=0
                    // Copy Here
                    // Page Handler section
                    // Page Request
                    prints "{\"request\":\"page_",0
                    covx varstor.currentpage.val,varstor.numtotxt.txt,0,0
                    prints varstor.numtotxt.txt,0
                    prints "\"}",0
                    // Enables the page reading timer
                    varstor.perror.val=0
                    // Resets the page timeout before being used
                    pagereader.en=1
                }
            }
        
